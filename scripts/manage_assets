#!/usr/bin/env python3

import json
import os
import sys
from collections import OrderedDict

# TODO: remove asset

# Instructions
if len(sys.argv) == 1:
  print('\n\tCampus Guide - asset manager')
  print('\t--add, -a\t\t Register new assets')
  print('\t--remove, -r\t\t Remove assets')
  exit()

adding_assets = False
removing_assets = False
asset_types = {
  'json': [ '.json' ],
  'image': [ '.png', '.gif', '.jpg' ],
}

def pluralize_type(asset_type):
  if asset_type is json:
    return 'json'
  else:
    return '{}s'.format(asset_type)

def add_new_asset(asset_name):
  asset_name_without_type = asset_name[:asset_name.rfind('.')]
  asset_name_type_only = asset_name[asset_name.rfind('.'):]
  asset_config_name = '/{}'.format(asset_name)
  asset_type = None
  for possible_asset_type in asset_types:
    for filetype in asset_types[possible_asset_type]:
      if asset_name_type_only == filetype:
        asset_type = possible_asset_type
        break

    if asset_type is not None:
      break

  if asset_type is None:
    print('Invalid asset type. Valid types are:')
    for asset_type in asset_types:
      print('\t{}: {}'.format(asset_type, ', '.join(asset_types[asset_type])))
    exit()
  elif asset_type == 'json':
    print('Place json in ./src/assets/json/{}'.format(asset_name))
    print('Place schema in ./src/assets/json/__schemas__/{}.schema{}'.format(asset_name_without_type, asset_name_type_only))

    index_output = ''
    added_asset = False
    with open('./src/assets/index.js') as index:
      for line in index:
        if not added_asset and '    name: ' in line:
          name = line[line.find('\'') + 1:-3]
          if asset_config_name < name:
            index_output += '    name: \'/{0}\',\n    require: require (\'./json/{0}\'),\n    schema: require(\'./json/__schemas__/{1}.schema.json\'),\n  {2},\n  {3}\n'.format(asset_name, asset_name_without_type, '}', '{')
            added_asset = True
        index_output += line

    with open('./src/assets/index.js', 'w', encoding='utf8') as index:
      index.write(index_output)

  elif asset_type == 'image':
    print('Place image in ./src/assets/images/{}'.format(asset_name))

  config_json = None
  with open('./src/config.json') as config:
    config_json = json.loads(config.read(), object_pairs_hook=OrderedDict)
    config_json.append({
      'name': asset_config_name,
      'type': asset_type,
      'versions': {
        '*': {
          'version': 1,
          'location': {
            'url': '${}file_server{}/assets/{}/{}'.format('{', '}', pluralize_type(asset_type), asset_name)
          }
        }
      }
    })

  config_json.sort(key=lambda x: (x['type'], x['name']))
  with open('./src/config.json', 'w', encoding='utf8') as outfile:
    json.dump(config_json, outfile, sort_keys=True, ensure_ascii=False, indent=2)

  print('* Finished adding asset {}'.format(asset_name))

def remove_asset(asset_name):
  asset_name_without_type = asset_name[:asset_name.rfind('.')]
  asset_name_type_only = asset_name[asset_name.rfind('.'):]
  asset_config_name = '/{}'.format(asset_name)
  asset_type = None
  for possible_asset_type in asset_types:
    for filetype in asset_types[possible_asset_type]:
      if asset_name_type_only == filetype:
        asset_type = possible_asset_type
        break

    if asset_type is not None:
      break

  if asset_type is None:
    print('Invalid asset type. Valid types are:')
    for asset_type in asset_types:
      print('\t{}: {}'.format(asset_type, ', '.join(asset_types[asset_type])))
    exit()
  elif asset_type == 'json':
    try:
      os.remove('./src/assets/json/{}'.format(asset_name))
    except OSError:
      pass

    try:
      os.remove('./src/assets/json/__schemas__/{}.schema{}'.format(asset_name_without_type, asset_name_type_only))
    except OSError:
      pass

    index_output = ''
    skip_lines = 0
    with open('./src/assets/index.js') as index:
      for line in index:
        if '    name: ' in line:
          name = line[line.find('\'') + 1:-3]
          if asset_config_name == name:
            index_output = index_output[:-4]
            skip_lines = 4
        if skip_lines > 0:
          skip_lines -= 1
        else:
          index_output += line

    with open('./src/assets/index.js', 'w', encoding='utf8') as index:
      index.write(index_output)

  elif asset_type == 'image':
    try:
      os.remove('./assets/images/{}'.format(asset_name))
    except OSError:
      pass

  config_json = None
  with open('./src/config.json') as config:
    config_json = json.loads(config.read(), object_pairs_hook=OrderedDict)

    for (index, config) in enumerate(config_json):
      if config['name'] == asset_config_name:
        config_json = config_json[:index] + config_json[index + 1:]
        break

  config_json.sort(key=lambda x: (x['type'], x['name']))
  with open('./src/config.json', 'w', encoding='utf8') as outfile:
    json.dump(config_json, outfile, sort_keys=True, ensure_ascii=False, indent=2)

  print('* Finished removing asset {}'.format(asset_name))

# Process arguments
for arg in sys.argv:
  if arg in ['--add', '-a']:
    adding_assets = True
    removing_assets = False
  elif arg in ['--remove', '-r']:
    adding_assets = False
    removing_assets = True
  else:
    if adding_assets:
      add_new_asset(arg)
    elif removing_assets:
      remove_asset(arg)